# CountIn Docker Compose Configuration for Coolify
#
# Required Coolify Environment Variables:
# - VITE_API_URL: https://api.countin.ignacio.tech
# - BACKEND_CORS_ORIGINS: https://countin.ignacio.tech,https://*.countin.ignacio.tech
# - DATABASE_URL: postgresql://user:pass@db:5432/countin
# - POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
# - ENV: production
#
# Coolify Service FQDNs:
# - Frontend: countin.ignacio.tech (port 3000)
# - Backend: api.countin.ignacio.tech (port 8000)

services:
  # PostgreSQL Database (Internal only - not exposed to host)
  db:
    image: postgres:15-alpine
    container_name: countin-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-countin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-countin}
      POSTGRES_DB: ${POSTGRES_DB:-countin}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - countin-network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: countin-backend
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://countin:countin@db:5432/countin}
      ENV: ${ENV:-production}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-https://countin.ignacio.tech,https://*.countin.ignacio.tech}
    expose:
      - "8000"
    depends_on:
      - db
    networks:
      - countin-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=backend"

  # Frontend (Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-https://api.countin.ignacio.tech}
    container_name: countin-frontend
    environment:
      # Make VITE_API_URL available at runtime for debugging
      VITE_API_URL: ${VITE_API_URL:-https://api.countin.ignacio.tech}
    expose:
      - "3000"
    networks:
      - countin-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=frontend"

volumes:
  postgres_data:
    driver: local

networks:
  countin-network:
    driver: bridge
